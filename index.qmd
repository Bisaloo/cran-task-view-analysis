---
title: "`r params$ctv` Task View analysis"
author: "Hugo Gruson"
params:
  ctv: "Epidemiology"
---

```{r}
tf <- tempfile(fileext = ".md")
download.file(
  paste0(
    "https://github.com/cran-task-views/",
    params$ctv,
    "/raw/main/",
    params$ctv,
    ".md"
  ),
  tf
)
```

```{r, message = FALSE}
library(ctv)
library(pkgsearch)
library(dplyr)
library(purrr)
```

```{r}
(
  ctv_pkg_descriptions <- ctv::read.ctv(tf) %>%
    purrr::pluck("packagelist", "name") %>%
    pkgsearch::cran_packages()
)
```

## Best practices

This list of automated checks for modern best practices in R package development is inspired by standards defined by various R communities such as [rOpenSci](https://ropensci.org) and [Epiverse-TRACE](https://epiverse-trace.github.io/).

### From `DESCRIPTION`

We can already pull some useful information for the `DESCRIPTION` file, which is the foundation of any R package. We perform the following checks:

- has GitHub URLs: does the package include a link to the source code on GitHub? Even though all CRAN packages are open-source, this demonstrates a commitment to facilitate bug report and community involvement in the project. This is tested by checking for a string starting with "https://github.com/" in the `URL` or `BugReports` fields.
- uses roxygen: [roxygen2](https://roxygen2.r-lib.org/) is an R package for documentation. It allows package developers to write their documentation next to the function definition (similar to [python's docstrings](https://en.wikipedia.org/wiki/Docstring)). It is considered best practice because it reduces the risk of the documentation going stale and its markdown syntax makes it simpler to produce high-quality documentation. This is checked by the presence of the custom `RoxygenNote` field in the `DESCRIPTION` file.
- uses testing framework: modern standards in software development recommend the use of regression and unit tests; these are tests that will ensure that your package remains fully functioning after any change to the code. This is tested by checking for the presence of one testing framework (testthat, testit, unitizer, RUnit or tinytest) in the package dependencies.
- no deprecated dependencies: some R packages (RUnit, XML, RCurl, plyr, reshape2) are known to have been superseded or abandoned by the maintainers. They will not include any new features and will at best receive punctual bug fixes. To limit technical debt, it is recommended to depend on more modern and actively developed alternatives.
- has vignette: vignettes are a long form of documentation for R packages. They often include more detailed examples or walkthroughs. To improve usability of the package, at least one vignette should be included. The recommended engine to build vignettes is the knitr R package. Compliance with this check is assessed by the presence of the knitr package in the `VignetteBuilder` field. 


:::{.column-screen-inset}
```{r}
ctv_pkg_descriptions %>%
  transmute(
    has_github_url     = startsWith(URL, "https://github.com/") | startsWith(BugReports, "https://github.com/"),
    uses_roxygen       = !is.na(RoxygenNote),
    has_knitr_vignette = grepl("knitr", VignetteBuilder),
    uses_testing       = purrr::map_lgl(dependencies, ~ any(.x$package %in% c("testthat", "testit", "unitizer", "RUnit", "tinytest"))),
    has_no_deprecated  = !purrr::map_lgl(dependencies, ~ any(.x$package %in% c("RUnit", "XML", "RCurl", "plyr", "reshape2")))
  ) %>%
  mutate(
    n_valid_checks = rowSums(.)
  ) %>%
  arrange(desc(n_valid_checks)) %>%
  mutate(across(-n_valid_checks, ~ ifelse(.x, "✅", "❌"))) %>% 
  DT::datatable()
```
:::

### From GitHub

```{r load-gh-helpers}
library(httr)
source("_scripts/gh.R")
```

:::{.column-screen-inset}
```{r}
ctv_pkg_descriptions %>%
  transmute(
    github_repo = dplyr::coalesce(
      stringr::str_match(URL, "https://github.com/(\\w+/\\w+)")[, 2],
      stringr::str_match(BugReports, "https://github.com/(\\w+/\\w+)/issues")[, 2]
    )
  ) %>%
  na.omit() %>%
  transmute(
    has_rmd_readme = purrr::map_lgl(github_repo, ~ gh_file_exists("README.Rmd", .x)),
    has_md_license = purrr::map_lgl(github_repo, ~ gh_file_exists("LICENSE.md", .x)),
    has_pkgdown    = purrr::map_lgl(github_repo, ~ any(gh_file_list_exists(c("_pkgdown.yml", "_pkgdown.yaml", "pkgdown/pkgdown.yml"), .x))),
    has_gha        = purrr::map_lgl(github_repo, ~ gh_file_exists(".github/workflows", .x))
  ) %>%
  mutate(
    n_valid_checks = rowSums(.)
  ) %>%
  arrange(desc(n_valid_checks)) %>%
  mutate(across(-n_valid_checks, ~ ifelse(.x, "✅", "❌"))) %>% 
  DT::datatable()
```
:::
