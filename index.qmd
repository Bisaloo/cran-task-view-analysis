---
title: "`r params$ctv` Task View analysis"
author: "James Baker, Chathura Edirisuriya, Hugo Gruson"
logo: images/logo_white.svg
date: last-modified
format: 
  dashboard:
    orientation: columns
    nav-buttons: github
theme: 
  - cosmo
  - custom.scss
params:
  ctv: "Epidemiology"
---

```{r}
knitr::opts_chunk$set(
  echo = FALSE
)
```

```{r}
tf <- tempfile(fileext = ".md")
download.file(
  paste0(
    "https://github.com/cran-task-views/",
    params$ctv,
    "/raw/main/",
    params$ctv,
    ".md"
  ),
  tf
)
```

```{r, message = FALSE}
library(ctv)
library(pkgsearch)
library(dplyr)
library(purrr)
library(ggplot2)
theme_set(theme_minimal())
```

```{r}
ctv_pkgs <- ctv::read.ctv(tf) %>%
  purrr::pluck("packagelist", "name") 

ctv_pkg_descriptions <- ctv_pkgs %>%
  pkgsearch::cran_packages()
```

## Best practices {width=33%}

### Row {height=20%}

```{r}
#| content: valuebox
#| title: "Number of packages"
list(
  color = "#10BED2",
  value = nrow(ctv_pkg_descriptions)
)
```

### Row

```{r}
desc_checks <- ctv_pkg_descriptions %>%
  transmute(
    package            = Package,
    has_github_url     = startsWith(URL, "https://github.com/") | startsWith(BugReports, "https://github.com/"),
    uses_roxygen       = !is.na(RoxygenNote),
    has_knitr_vignette = grepl("knitr", VignetteBuilder),
    uses_testing       = purrr::map_lgl(dependencies, ~ any(.x$package %in% c("testthat", "testit", "unitizer", "RUnit", "tinytest"))),
    has_no_deprecated  = !purrr::map_lgl(dependencies, ~ any(.x$package %in% c("RUnit", "XML", "RCurl", "plyr", "reshape2"))),
    uses_authors_r     = !is.na(`Authors@R`),
    uses_orcid         = grepl("<https://orcid.org/", Author, fixed = TRUE)
  )
```

```{r load-gh-helpers}
library(httr)
source("_scripts/gh.R")
```

```{r, cache = TRUE}
gh_checks <- read.csv("https://raw.githubusercontent.com/cran-task-views/Epidemiology/main/data/source_repositories.csv") %>%
  transmute(
    package        = package,
    has_rmd_readme = purrr::map_lgl(github_repo, ~ gh_file_exists("README.Rmd", .x)),
    has_md_license = purrr::map_lgl(github_repo, ~ gh_file_exists("LICENSE.md", .x)),
    uses_pkgdown    = purrr::map_lgl(github_repo, ~ any(gh_file_list_exists(c("_pkgdown.yml", "_pkgdown.yaml", "pkgdown/pkgdown.yml"), .x))),
    uses_gha        = purrr::map_lgl(github_repo, ~ gh_file_exists(".github/workflows", .x)),
    has_news       = purrr::map_lgl(github_repo, ~ gh_file_exists("NEWS.md", .x))
  )
```

```{r, cache = TRUE}
extra_checks <- ctv_pkg_descriptions |> 
  transmute(
    package = Package,
    has_doi = purrr::map_lgl(package, ~ !is.null(citation(package = .x)$doi))
  )
```

```{r}
all_checks <- merge(
  gh_checks,
  desc_checks,
  all = TRUE,
  by = "package"
) |> 
  merge(
    extra_checks,
    all = TRUE,
    by = "package"
  )
n_pkgs <- nrow(all_checks)
```

```{r}
check_descriptions <- tribble(
  ~check, ~description,
  "has_github_url", "Has a GitHub URL",
  "uses_roxygen", "Uses Roxygen",
  "has_knitr_vignette", "Has a knitr vignette",
  "uses_testing", "Uses testing package",
  "has_no_deprecated", "Does not depend on deprecated packages (XML, RCurl, RUnit, plyr, reshape2)",
  "uses_authors_r", "Has Authors@R field",
  "uses_orcid", "Has ORCID in Author field",
  "has_rmd_readme", "Has README.Rmd",
  "has_md_license", "Has LICENSE.md",
  "uses_pkgdown", "Uses pkgdown",
  "uses_gha", "Uses GitHub Actions",
  "has_news", "Has NEWS.md",
  "has_doi", "A DOI is provided for archival and citation"
)
```

```{r}
all_checks |>
  tibble::column_to_rownames("package") |>
  t() |>
  as.data.frame() |>
  tibble::rownames_to_column("check") |>
  left_join(check_descriptions) |>
  select(-check) |> 
  mutate(
    passed = rowSums(pick(-description), na.rm = TRUE) / n_pkgs * 100,
    .keep = "unused"
  ) |>
  arrange(desc(passed)) |> 
  gt::gt() |> 
  gt::fmt_number(
    columns = passed,
    decimals = 0,
    pattern = "{x}%"
  ) |> 
  gt::data_color(
    method = "numeric",
    palette = "viridis",
    domain = c(0, 100)
  )
```

## Authorship trends and sustainability {width=33%}

```{r}
pkg_versions <- ctv_pkgs |> 
  purrr::map(pkgsearch::cran_package_history) |> 
  dplyr::bind_rows() |> 
  dplyr::mutate(
    date = lubridate::ymd_hms(date),
    maintainer = trimws(stringr::str_extract(Maintainer, "^[^<]+"))
  )
```

```{r}
maintainers <- pkg_versions |> 
  group_by(name = maintainer) |> 
  summarise(
    maintainer_since = lubridate::year(min(date))
  )

authors <- pkg_versions |> 
  dplyr::mutate(
    Author = gsub("<U+000a>", " ", Author, fixed = TRUE),
    Author = gsub(" and ", ", ", Author, fixed = TRUE),
    Author = gsub("\\bwith contributions (of|from|by)\\b", ", ", Author, fixed = TRUE),
    parsed_authors_r = purrr::map(`Authors@R`, ~ tryCatch(format(eval(parse(text = .x)), include = c("given", "family")), error = function(e) NA)),
    parsed_authors = strsplit(gsub("<[^>]*>", "", gsub("\\([^)]*\\)", "", gsub("\\[(\\w| |,)*\\]", "", Author))), "[[:space:]]*,+[[:space:]]*"),
    auts = coalesce(parsed_authors, parsed_authors_r)
  ) |> 
  tidyr::unnest(cols = auts) |> 
  dplyr::mutate(
    auts = stringr::str_trim(auts),
    auts = stringi::stri_trans_general(auts, "ASCII"),
    auts = stringr::str_remove_all(auts, "[[:punct:]]")
#    auts = purrr::map_chr(auts, possibly(~ paste(as.person(.x)$given[1], as.person(.x)$family), otherwise = ""))
  ) |>
  group_by(name = auts) |> 
  summarise(
    author_since = lubridate::year(min(date))
  )

full_join(maintainers, authors, by = "name") |>
  tidyr::pivot_longer(
    cols = c(maintainer_since, author_since),
    names_to = "role",
    values_to = "year"
  ) |> 
  dplyr::mutate(
    role = tools::toTitleCase(gsub("_since$", "", role))
  ) |> 
  ggplot(aes(x = year, fill = role)) +
    geom_histogram(binwidth = 1) +
    labs(
      title = "Recruitement of new authors & maintainers in the ecosystem",
      x = "Year",
      y = "Number of new authors/maintainers",
      fill = ""
    ) +
    theme(legend.position = "bottom") +
    scale_fill_brewer(palette = "Set2")
```

```{r}
source("_scripts/parse_archive.R")

yearly_archivals <- archive_df |> 
  filter(package %in% ctv_pkgs) |> 
  dplyr::mutate(
    date = lubridate::ymd(archivals),
    year = lubridate::year(date),
    .keep = "unused"
  ) |> 
  count(year, name = "archivals") |> 
  dplyr::mutate(archivals = -archivals)
```

```{r}
pkg_versions |> 
  dplyr::mutate(
    first_release = Version == min(Version), 
    maintainer_change = maintainer != dplyr::lag(maintainer),
    .by = Package
  ) |>
  dplyr::group_by(year = lubridate::year(date)) |> 
  summarise(
    updates = sum(!first_release),
    `first releases` = sum(first_release),
    `maintainer transitions` = sum(maintainer_change),
    .groups = "drop"
  ) |> 
  dplyr::full_join(yearly_archivals, by = "year") |> 
  tidyr::pivot_longer(
    cols = c(updates, `first releases`, `maintainer transitions`, archivals),
    names_to = "release_type",
    values_to = "yearly_releases"
  ) |>
  ggplot(aes(x = factor(year), y = yearly_releases, fill = release_type)) +
    geom_col() +
    labs(
      title = "New releases or package updates",
      x = "Year", y = "Number of releases",
      fill = ""
    ) +
    theme(legend.position = "bottom") +
    scale_fill_brewer(palette = "Set1")
```

## Dependencies and popularity {width=33%}

```{r}
plot(cars)
```


